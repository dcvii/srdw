#!/bin/ksh
############################################################
#       File:       restore.sh
#       Purpose:    [re]Build App in Place
#
#       Version:
#       Parameters:
#       Created:
#       Author:   mbowen@mdcbowen.org
#       Parameters:
#       User to run with: essbase
#
#	modified 20030321.0930 by mbowen
#
############################################################
# This program restores only data from the export subdirectory to the application.
# It assumes that the metadata is in place. Migrate first if you are unsure.
# It restores in place, so the build version that is in the export subdir is what will
# be restored. It does not calculate the database. You must do that manually.
############################################################

## this version to run on any box

## init
# whereami
disk=`head -1 ~essbase/disk.dat`
envid=`head -1 ~essbase/env.dat`

# some handy constants
PGMNAME=`basename $0`
PID=$$

appid=$1


errdir="/${disk}03/essbase/rdwmr/errlogs/"
logdir="/${disk}03/essbase/rdwmr/logs/"
expdir="/${disk}03/essbase/rdwmr/export/"
appdir="/${disk}01/vendors/essbase/app/"
scrdir="/${disk}03/essbase/rdwmr/scripts/"
inpdir="/${disk}03/essbase/rdwmr/input/"
bindir="/${disk}01/vendors/essbase/bin/"

recipients='bowenm@nmc.nna, schwabj@nmc.nna, mcdougm@nmc.nna'

logfile="${logdir}restore_activity.log"

## app parse
case $appid in
	'patb') xapp="PATB"; db="Main"; nthreads=4; valid=1;;
	'rbs')  xapp="RBS";  db="Main"; nthreads=4; valid=1;;
	'rfem')  xapp="RFEM";  db="Main"; nthreads=4; valid=1;;
	'rpla')  xapp="RPLA";  db="Main"; nthreads=4; valid=1;;
	'rplb')  xapp="RPLB";  db="Main"; nthreads=4; valid=1;;
	'rplu')  xapp="RPLU";  db="Main"; nthreads=4; valid=1;;
	'locl')  xapp="LOCL";  db="Main"; nthreads=4; valid=1;;
	*)	valid=0;;
esac

## subs
log () {
	TIMESTAMP=`date '+%m/%d/%Y %H:%M:%S'`
	echo "${TIMESTAMP} ${PGMNAME} ${PID} $*" >>$logfile
}



makemsh () {

	app=$1
	mshfile="${app}_restore.msh"
	echo generating $mshfile
	echo "/* autogenerated by restore.sh `date` */" > $mshfile
	echo "login system manager on localhost;" >> $mshfile

	echo "alter application $xapp disable connects;" >> $mshfile
	echo "alter system logout session on application ${xapp};" >> $mshfile


	echo "alter database ${xapp}.Main reset;" >> $mshfile

	# import data in four parts

	a="'${appid}_ex1.txt'"
	echo "import database ${xapp}.Main data" >> $mshfile
	echo "from server data_file $a" >> $mshfile
	echo "on error abort;"  >> $mshfile

	a="'${appid}_ex2.txt'"
	echo "import database ${xapp}.Main data" >> $mshfile
	echo "from server data_file $a" >> $mshfile
	echo "on error abort;"  >> $mshfile

	a="'${appid}_ex3.txt'"
	echo "import database ${xapp}.Main data" >> $mshfile
	echo "from server data_file $a" >> $mshfile
	echo "on error abort;"  >> $mshfile

	a="'${appid}_ex4.txt'"
	echo "import database ${xapp}.Main data" >> $mshfile
	echo "from server data_file $a" >> $mshfile
	echo "on error abort;"  >> $mshfile

	echo "alter application ${xapp} enable connects;" >> $mshfile

	echo "logout; exit;" >> $mshfile

}



## MAIN

logfile="${logdir}restore_activity.log"


# MEX6 & RFIN & PATB
if [[ $valid -eq 1 ]]; then
	echo "restore of $xapp initiated."
	log "restore of $xapp initiated."
	update=1


	# get new build number

	bnum=`head -1 ${expdir}${appid}.ver`
	typeset -R3 x=$bnum   # right(3)
	ofspec="${appid}_build${x}_objects.tar"
	dfspec="${appid}_build${x}_data.tar"

	echo using build${x}..

	# expand data in expdir
	cd ${expdir}
	#gunzip ${dfspec}.gz
	pkzipc -extract ${dfspec}.zip
	tar -xvf $dfspec

	# copy export files into appdir
	cd ${appdir}${xapp}/Main

	cp -p ${expdir}${appid}_ex1.txt .
	cp -p ${expdir}${appid}_ex2.txt .
	cp -p ${expdir}${appid}_ex3.txt .
	cp -p ${expdir}${appid}_ex4.txt .


	# restore from export files
	cd ${scrdir}
	makemsh $appid

	echo "restoring.."
	echo "${envid} ${xapp} Restore" > ${logdir}${appid}_restore.log
	date >> ${logdir}${appid}_restore.log
	${bindir}essmsh ${appid}_restore.msh >> ${logdir}${appid}_restore.log
	${scrdir}stats.sh ${appid} >> ${logdir}${appid}_restore.log
	echo done

	# cut restoration links - mbowen.20030403
	cd ${appdir}${xapp}/Main

	rm -f ${appid}_ex1.txt
	rm -f ${appid}_ex2.txt
	rm -f ${appid}_ex3.txt
	rm -f ${appid}_ex4.txt


	# notify
	cd ${logdir}
	cat ${appid}_restore.log | mailx -s "${envid} ${xapp} Restore" $recipients
	perl ${scrdir}arc.pl ${appid}_restore.log


	# cleanup
	cd ${expdir}
	rm -f ${appid}*.txt

	echo ready to calculate.

fi



if [[ $update -eq 0 ]]; then
	log "no new tokens found"
	echo "No new data."
	# notify "No new data."

fi



#################
# mbowen - 20030403 - cut the links after restoration. the long names are problematic for the app manager.

# mbowen - 20030604 - copy instead of link
#                   - end the farce of dummy outline stuff


## old code
#cd ${errdir}
#
#	# handle rejects
#	if [[ -a ${appid}_b_dummy1.err ]]; then
#		perl ${scrdir}uerr.pl ${appid}_b_dummy1.err
#		cat ${appid}_b_dummy1.err.u | mailx -s "${envid} ${xapp} Migration Errors!!" $recipients
#		perl ${scrdir}zarc.pl ${appid}_b_dummy1.err
#		perl ${scrdir}zarc.pl ${appid}_b_dummy1.err.u
#	fi
#
#	if [[ -a ${appid}_b_dummy2.err ]]; then
#		perl ${scrdir}uerr.pl ${appid}_b_dummy2.err
#		cat ${appid}_b_dummy2.err.u | mailx -s "${envid} ${xapp} Migration Errors!!" $recipients
#		perl ${scrdir}zarc.pl ${appid}_b_dummy2.err
#		perl ${scrdir}zarc.pl ${appid}_b_dummy2.err.u
#	fi
#

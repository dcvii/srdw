#!/bin/ksh
############################################################
#       File:       backup.sh
#       Purpose:    Dump Essbase Objects & Data into one file
#
#       Version:
#       Parameters:
#       Created:
#       Author:   mbowen@mdcbowen.org
#       Parameters:
#       User to run with: essbase
#
#	modified 20030425.1630 by mbowen
#
############################################################
# Regional DW Backup
#
# 20030325.1335 - mbowen@mdcbowen.org
# for Nissan USA
#
############################################################

# good for all boxes

## init
# whereami
disk=`head -1 ~essbase/disk.dat`
envid=`head -1 ~essbase/env.dat`


# some handy constants
PGMNAME=`basename $0`
PID=$$

appid=$1


errdir="/${disk}03/essbase/rdwmr/errlogs/"
bakdir="/${disk}03/essbase/rdwmr/backup/"
logdir="/${disk}03/essbase/rdwmr/logs/"
expdir="/${disk}03/essbase/rdwmr/export/"
appdir="/${disk}01/vendors/essbase/app/"
scrdir="/${disk}03/essbase/rdwmr/scripts/"
inpdir="/${disk}03/essbase/rdwmr/input/"
bindir="/${disk}01/vendors/essbase/bin/"

recipients='bowenm@nmc.nna, lyb@nmc.nna, schwabj@nmc.nna, mcdougm@nmc.nna'

logfile="${logdir}backup_activity.log"

## subs
log () {
	TIMESTAMP=`date '+%m/%d/%Y %H:%M:%S'`
	echo "${TIMESTAMP} ${PGMNAME} ${PID} $*" >>$logfile
}


stash1 () {
	echo "stashing..$1"
ftp -n <<EOF
open 10.70.95.193
user essbase nardwdv1
cd /03fs03/essbase/rdwmr/backup
put $1
EOF
}

stash2 () {
	echo "stashing..$1"
ftp -n <<EOF
open 10.64.6.146
user essbase nardwqa1
cd /146fs03/essbase/rdwmr/backup
put $1
EOF
}


makemsh () {

	app=$1
	mshfile="${app}_backup.msh"
	echo generating $mshfile
	echo "/* autogenerated by backup.sh `date` */" > $mshfile
	echo "login system manager on localhost;" >> $mshfile

	echo "alter application $xapp disable connects;" >> $mshfile
	echo "alter system logout session on application ${xapp};" >> $mshfile

	# export in four parts
	echo "export database ${xapp}.Main" >> $mshfile
	echo "input data to data_file" >> $mshfile

	a="'${bakdir}${appid}_ex1.txt',"
	echo "$a" >> $mshfile

	a="'${bakdir}${appid}_ex2.txt',"
	echo "$a" >> $mshfile

	a="'${bakdir}${appid}_ex3.txt',"
	echo "$a" >> $mshfile

	a="'${bakdir}${appid}_ex4.txt';"
	echo "$a" >> $mshfile

	echo "alter application ${xapp} enable connects;" >> $mshfile
	echo "logout; exit;" >> $mshfile

}



## main
clear

## app parse
case $appid in
	'mex6') xapp="MEX6"; db="Main"; valid=1;;
	'patb') xapp="PATB"; db="Main"; valid=1;;
	'locl') xapp="LOCL"; db="Main"; valid=1;;
	'rbs') xapp="RBS"; db="Main"; valid=1;;
	'rbsc') xapp="RBSC"; db="Main"; valid=0;;
	'rx11') xapp="RX11"; db="Main"; valid=1;;
	'rx10') xapp="RX10"; db="Main"; valid=1;;
	'rpla') xapp="RPLA"; db="Main"; valid=1;;
	'rplb') xapp="RPLB"; db="Main"; valid=1;;
	'rfem') xapp="RFEM"; db="Main"; valid=1;;
	'rplc') xapp="RPLC"; db="Main"; valid=1;;
	'rplu') xapp="RPLU"; db="Main"; valid=1;;
	*)	echo "backup.sh: invalid selection: $appid"; valid=0;;
esac

# environment parse
typeset -L1 v=$envid #left character
case $v in
	'D')	altenv="dev193";;
	'Q')	altenv="qa146";;
	'P')	altenv="prod143";;
	*)	echo "backup.sh: environment can't be read: $envid"; valid=0;;

esac


## All Apps
if [[ $valid -eq 1 ]]; then
	echo ${appid} backup initiated
	log ${appid} backup initiated
	cd $scrdir

	# get build number and name destination files
	bnum=`head -1 ${expdir}${appid}.ver`
	typeset -R3 x=$bnum   # right 3 digits = build number
	bfspec="${appid}_build${x}_${altenv}_backup.tar"


	## data export using internally generated msh

	makemsh ${appid}
	date > ${logdir}${appid}_backup.log
	echo $envid >> ${logdir}${appid}_backup.log
	echo exporting data..
	${bindir}essmsh ${scrdir}${appid}_backup.msh >> ${logdir}${appid}_backup.log
	echo done.


	## tar & gzip data export

	echo backing up objects..
	cd ${appdir}${xapp}/Main
	tar -cf $bfspec *.rul *.otl *.csc *.rep *.wiz ${expdir}${appid}.ver
	mv $bfspec $bakdir.


	echo adding export data..
	cd ${bakdir}
	tar -rf $bfspec ${appid}_ex*.txt
	pkzipc -add -move -fast -silent ${bfspec}.zip $bfspec
	#gzip -f $bfspec
	rm -f ${appid}*.txt
	echo done.
	echo ' '

	# stash data offsite
	if [[ $v = 'Q' ]]; then
		echo "stashing backup to DEV 193.."
		stash1 ${bfspec}.zip
	elif [[ $v = 'D' ]]; then
		echo "stashing backup to QA 146.."
		stash2 ${bfspec}.zip
	elif [[ $v = 'P' ]]; then
		echo "stashing backup to QA 146.."
		stash2 ${bfspec}.zip
	fi
	echo done.
	echo ' '


	## notify and archive log
	cd ${logdir}
	cat ${appid}_backup.log | mailx -s "${envid} ${xapp} Backup" $recipients
	perl ${scrdir}arc.pl ${appid}_backup.log

	ls -lt ${bakdir}${appid}*

fi


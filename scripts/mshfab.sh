#!/bin/ksh
############################################################
#       File:       mshfab.sh
#       Purpose:    Generate Update Scripts
#
#       Version:
#       Parameters:
#       Created:
#       Author:   mbowen
#       Parameters:
#       User to run with: essbase
#
############################################################
# Regional DW Update
#
#
# 20030325.1000 - mbowen@mdcbowen.org
# for Nissan USA
#
#	modified 20030417.1730 by mbowen
#
############################################################
# mshfab is called exclusively by update.sh


## this version to run on any box

## init
# whereami
disk=`head -1 ~essbase/disk.dat`
envid=`head -1 ~essbase/env.dat`

appid=$1


errdir="/${disk}03/essbase/rdwmr/errlogs/"
logdir="/${disk}03/essbase/rdwmr/logs/"
expdir="/${disk}03/essbase/rdwmr/export/"
appdir="/${disk}01/vendors/essbase/app/"
scrdir="/${disk}03/essbase/rdwmr/scripts/"
inpdir="/${disk}03/essbase/rdwmr/input/"

rfin_companies="ana das ims nna nmac ncc ncfi nda nesci nmic nesco nmch nmex nmcic nmisc ntcna nmihc nca nci"
recipients='bowenm@nmc.nna, schwabj@nmc.nna, mcdougm@nmc.nna'




## app parse
case $appid in
	'rbs')  xapp="RBS"; db="Main"; valid=1;;
	'rplu') apptype="rpl"; xapp="RPLU"; db="Main"; valid=1;;
	'rplb') apptype="rpl"; xapp="RPLB"; db="Main"; valid=1;;
	'rpla') apptype="rpl"; xapp="RPLA"; db="Main"; valid=1;;
	'rfem') xapp="RFEM"; db="Main"; valid=1;;
	'patb') xapp="PATB"; db="Main"; valid=1;;
	'locl') xapp="LOCL"; db="Main"; valid=1;;
	*)	valid=0;;
esac


## SUBS


## start mshfile

echo mshfab: fabricating essbase update script..




## RFEM
if [[ $appid = 'rfem' ]]; then

	mshfile=${scrdir}rfem_update.msh

	echo "/* autogenerated by mshfab.sh `date` on $envid */" > $mshfile
	echo 'login system manager on localhost;' >> $mshfile


	# elim files
	efile="all_e.txt"
	erfile="'${errdir}${appid}_all_l_elim.err'"
	rule="'l_data'"


	# check for data file in input subdir
	if [[ -a ${inpdir}$efile ]]; then
		new=TRUE

		# load data
		echo " " >> $mshfile
		echo "import database ${xapp}.${db} data" >> $mshfile
		echo "from server text data_file '${efile}'" >> $mshfile
		echo "using server rules_file ${rule}" >> $mshfile
		echo "on error write to ${erfile};" >> $mshfile
		echo " " >> $mshfile


	fi



	echo 'logout; exit;' >> $mshfile

fi

## RPLA, RPLB
if [[ $apptype = 'rpl' ]]; then

	mshfile=${scrdir}${appid}_update.msh

	echo "/* autogenerated by mshfab.sh `date` on $envid */" > $mshfile
	echo 'login system manager on localhost;' >> $mshfile


	for company in $rfin_companies
	do
		# echo $company

		# use upper case for token name
		typeset -u big=$company
		dfile="${company}6p.txt"
		erfile="'${errdir}${appid}_${company}_l_data.err'"
		rule="'l_data6'"


		# check for data file in input subdir
		# regular data files
		if [[ -a ${inpdir}$dfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${dfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi


		# budget files
		bfile="${company}6p_b.txt"
		erfile="'${errdir}${appid}_${company}_l_bud.err'"
		rule="'l_data6'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$bfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${bfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi


	done

	if [[ ! $appid = 'rplu' ]]; then

		# elim files
		efile="allp_e.txt"
		erfile="'${errdir}${appid}_all_l_elim.err'"
		rule="'l_data6'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$efile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${efile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi
	fi


	echo 'logout; exit;' >> $mshfile

fi



## (New) RBS
## - notice that there are multiple passes over the data for currency conversion purposes
#    therefore only one error file will be created per file (not per rule). why? because
#    the same file will reject the same way and we don't want double rejects. the errfile is
#    written twice.
if [[ $appid = 'rbs' ]]; then

	mshfile=${scrdir}rbs_update.msh

	echo "/* autogenerated by mshfab.sh `date` on $envid */" > $mshfile
	echo 'login system manager on localhost;' >> $mshfile


	for company in $rfin_companies
	do
		# use upper case for token name
		typeset -u big=$company
		dfile="${company}6.txt"
		erfile="'${errdir}${appid}_${company}_l_data.err'"
		rule="'l_Dlocl'"


		# check for data file in input subdir
		# six digit local currency
		if [[ -a ${inpdir}$dfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${dfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi

		# six digit usd files (same file second pass)
		rule="'l_Dusd'"
		if [[ -a ${inpdir}$dfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${dfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi



		# budget files (local)
		bfile="${company}6_b.txt"
		erfile="'${errdir}${appid}_${company}_l_bud.err'"
		rule="'l_Dlocl'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$bfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${bfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi

		# budget files (usd)
		rule="'l_Dusd'"
		# check for data file in input subdir
		if [[ -a ${inpdir}$bfile ]]; then
			new=TRUE

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${bfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi


	done

	# elim files
	efile="allp_e.txt"
	erfile="'${errdir}${appid}_all_l_elim.err'"
	rule="'l_Eusd'"


	# check for data file in input subdir
	if [[ -a ${inpdir}$efile ]]; then
		new=TRUE

		# load data
		echo " " >> $mshfile
		echo "import database ${xapp}.${db} data" >> $mshfile
		echo "from server text data_file '${efile}'" >> $mshfile
		echo "using server rules_file ${rule}" >> $mshfile
		echo "on error write to ${erfile};" >> $mshfile
		echo " " >> $mshfile


	fi


	echo 'logout; exit;' >> $mshfile

fi



## LOCL
if [[ $appid = 'locl' ]]; then

	mshfile=${scrdir}locl_update.msh

	echo "/* autogenerated by mshfab.sh `date` on $envid */" > $mshfile
	echo 'login system manager on localhost;' >> $mshfile


	for company in $rfin_companies
	do
		# echo $company

		# use upper case for token name
		typeset -u big=$company
		tfile="${big}.token"
		dfile="${company}9.txt"
		erfile="'${errdir}${appid}_${company}_l_data.err'"
		rule="'l_data9'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$dfile ]]; then
			new=TRUE
			#log $company data found

			# insertClear  # not doing it this time.

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${dfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi

		# BUD9 files
		dfile="${company}9_b.txt"
		erfile="'${errdir}${appid}_${company}_l_bud.err'"
		rule="'l_data9'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$dfile ]]; then
			new=TRUE
			#log $company data found

			# insertClear  # not doing it this time.

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${dfile}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi

	done



	echo 'logout; exit;' >> $mshfile

fi

## PAIC - removed



if [[ $appid = 'patb' ]]; then

	mshfile=${scrdir}patb_update.msh

	echo "/* autogenerated by mshfab.sh `date` on $envid */" > $mshfile
	echo 'login system manager on localhost;' >> $mshfile


	for company in $rfin_companies
	do
		# echo $company

		# use upper case for token name
		typeset -u big=$company
		tfile="${big}.token"
		filep=${company}_p.txt
		erfile="'${errdir}${appid}_${company}_l_data.err'"
		rule="'l_data'"


		# check for data file in input subdir
		if [[ -a ${inpdir}$filep ]]; then
			new=TRUE
			#log $company data found

			# insertClear  # not doing it this time.

			# load data
			echo " " >> $mshfile
			echo "import database ${xapp}.${db} data" >> $mshfile
			echo "from server text data_file '${filep}'" >> $mshfile
			echo "using server rules_file ${rule}" >> $mshfile
			echo "on error write to ${erfile};" >> $mshfile
			echo " " >> $mshfile


		fi

	done


	echo 'logout; exit;' >> $mshfile

fi


echo mshfab: done.


